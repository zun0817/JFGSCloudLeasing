package com.cloud.leasing.module.mine.followimport android.app.Activityimport android.content.Intentimport android.os.Bundleimport android.view.Viewimport androidx.activity.viewModelsimport com.cloud.leasing.Rimport com.cloud.leasing.base.BaseActivityimport com.cloud.leasing.constant.PageNameimport com.cloud.leasing.databinding.ActivityMineFollowBindingimport com.cloud.leasing.util.ViewTouchUtilimport com.gyf.immersionbar.ktx.immersionBarclass MineFollowActivity :    BaseActivity<ActivityMineFollowBinding>(ActivityMineFollowBinding::inflate),    View.OnClickListener {    companion object {        fun startActivity(activity: Activity) {            val intent = Intent()            intent.setClass(activity, MineFollowActivity::class.java)            activity.startActivity(intent)        }    }    override fun getPageName() = PageName.FOLLOW    private val viewModel: MineFollowViewModel by viewModels()    private var equipmentFragment: EquipmentFragment? = null    private var requireFragment: RequireFragment? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        initSystemBar()        initFragment()        initView()    }    private fun initView() {        viewBinding.mineFollowDeviceLl.setOnClickListener(this)        viewBinding.mineFollowRequireLl.setOnClickListener(this)        viewBinding.mineFollowBackImg.setOnClickListener(this)        ViewTouchUtil.expandViewTouchDelegate(viewBinding.mineFollowBackImg)    }    private fun initSystemBar() {        immersionBar {            statusBarColor(R.color.color_0e62B8)            fitsSystemWindows(true)            statusBarDarkFont(true)            navigationBarColor(R.color.white)            navigationBarDarkIcon(true)        }    }    private fun initFragment() {        equipmentFragment = EquipmentFragment.newInstance()        requireFragment = RequireFragment.newInstance()        supportFragmentManager.beginTransaction()            .add(R.id.mine_follow_fragment_container, equipmentFragment!!)            .commitAllowingStateLoss()        supportFragmentManager.beginTransaction()            .add(R.id.mine_follow_fragment_container, requireFragment!!)            .commitAllowingStateLoss()        supportFragmentManager.beginTransaction().hide(requireFragment!!).commitAllowingStateLoss()    }    override fun onClick(v: View?) {        val fragmentTransaction = supportFragmentManager.beginTransaction()        when (v!!.id) {            R.id.mine_follow_back_img -> this.finish()            R.id.mine_follow_device_ll -> {                checkNull()                fragmentTransaction.hide(requireFragment!!)                fragmentTransaction.show(equipmentFragment!!)                fragmentTransaction.commitAllowingStateLoss()                viewBinding.mineFollowDeviceTv.setTextColor(resources.getColor(R.color.color_0E64BC))                viewBinding.mineFollowDeviceView.visibility = View.VISIBLE                viewBinding.mineFollowRequireTv.setTextColor(resources.getColor(R.color.color_999999))                viewBinding.mineFollowRequireView.visibility = View.INVISIBLE            }            R.id.mine_follow_require_ll -> {                checkNull()                fragmentTransaction.hide(equipmentFragment!!)                fragmentTransaction.show(requireFragment!!)                fragmentTransaction.commitAllowingStateLoss()                viewBinding.mineFollowDeviceTv.setTextColor(resources.getColor(R.color.color_999999))                viewBinding.mineFollowDeviceView.visibility = View.INVISIBLE                viewBinding.mineFollowRequireTv.setTextColor(resources.getColor(R.color.color_0E64BC))                viewBinding.mineFollowRequireView.visibility = View.VISIBLE            }        }    }    private fun checkNull() {        if (equipmentFragment == null) {            equipmentFragment = EquipmentFragment.newInstance()            supportFragmentManager.beginTransaction()                .add(R.id.mine_follow_fragment_container, equipmentFragment!!)                .commitAllowingStateLoss()        }        if (requireFragment == null) {            requireFragment = RequireFragment.newInstance()            supportFragmentManager.beginTransaction()                .add(R.id.mine_follow_fragment_container, requireFragment!!)                .commitAllowingStateLoss()        }    }}